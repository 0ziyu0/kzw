package com.kzw.portal.service.impl;

import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;

import com.kzw.common.pojo.KZWResult;
import com.kzw.pojo.TbItem;
import com.kzw.portal.service.ItemService;
import com.kzw.portal.service.StaticPageService;

import freemarker.template.Configuration;
import freemarker.template.Template;

@Service("staticPageService")
public class StaticPageServiceImpl implements StaticPageService {

	@Resource
	private ItemService itemService;
	@Resource
	private FreeMarkerConfig freeMarkerConfig;

	@Value("${STATIC_PAGE_PATH}")
	private String STATIC_PAGE_PATH;

	@Override
	public KZWResult getItemHtml(Long itemId) throws Exception {

		TbItem item = itemService.getItemById(itemId);
		// 商品描述
		String itemDesc = itemService.getItemDescById(itemId);
		// 规格参数
		String itemParam = itemService.getItemParamById(itemId);
		// 生成静态页面
		Configuration configurable = freeMarkerConfig.getConfiguration();
		Template template = configurable.getTemplate("item.ftl");

		// 创建一个数据集
		Map root = new HashMap<>();
		root.put("item", item);
		root.put("itemDesc", itemDesc);
		root.put("itemParam", itemParam);

		// 创建一个writer对象 
		Writer out = new FileWriter(new File(STATIC_PAGE_PATH + itemId + ".html"));

		// 生成静态文件
		template.process(root, out);
		out.flush();
		out.close();

		return KZWResult.ok();
	}

}




















